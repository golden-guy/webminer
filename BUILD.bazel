# Copyright (c) 2022 Mark Friedenbach
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "common",
    hdrs = [
        "compat/byteswap.h",
        "compat/cpuid.h",
        "compat/endian.h",
        "crypto/common.h",
        "support/allocators/secure.h",
        "support/cleanse.h",
        "support/lockedpool.h",
        "util/macros.h",
    ],
    srcs = [
        "support/cleanse.cc",
        "support/lockedpool.cc",
    ],
)

cc_library(
    name = "chacha20",
    hdrs = [
        "crypto/chacha20.h",
    ],
    srcs = [
        "crypto/chacha20.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "random",
    hdrs = [
        "random.h",
        "randomenv.h",
    ],
    srcs = [
        "random.cc",
        "randomenv.cc",
    ],
    deps = [
        "@com_google_absl//absl/time:time",
        ":chacha20",
        ":sha2",
        ":sync",
        ":uint256",
    ],
)

cc_library(
    name = "sha2",
    copts = [
        "-msse4.1",
    ],
    defines = [
        "ENABLE_SSE41",
        "USE_ASM",
    ],
    hdrs = [
        "crypto/sha256.h",
        "crypto/sha512.h",
    ],
    srcs = [
        "crypto/sha256.cc",
        "crypto/sha256_sse4.cc",
        "crypto/sha256_sse41.cc",
        "crypto/sha512.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "sync",
    hdrs = [
        "sync.h",
        "threadsafety.h",
    ],
    srcs = [
        "sync.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "uint256",
    hdrs = [
        "uint256.h",
    ],
    srcs = [
        "uint256.cc",
    ],
    deps = [
        "@com_google_absl//absl/strings:strings",
    ],
)

load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name = "webminer",
    srcs = ["main.cc"],
    deps = [
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/strings:strings",
        ":cpr",
        ":random",
        ":sha2",
        ":uint256",
        ":univalue",
    ],
)

load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

cmake(
    name = "cpr",
    cache_entries = {
        "BUILD_SHARED_LIBS": "NO",
        "CMAKE_C_FLAGS": "-fPIC",
        "CPR_FORCE_USE_SYSTEM_CURL": "ON",
        "FETCHCONTENT_FULLY_DISCONNECTED": "ON",
    },
    deps = [
        "@boringssl//:ssl",
        ":curl",
        ":zlib",
    ],
    lib_source = "@cpr//:all_srcs",
    install = True,
    out_static_libs = ["libcpr.a"],
)

cmake(
    name = "curl",
    cache_entries = {
        "BUILD_SHARED_LIBS": "NO",
        "CMAKE_C_FLAGS": "-fPIC",
        "CURL_DISABLE_LDAP": "YES",
    },
    deps = [
        "@boringssl//:ssl",
        ":gcrypt",
        ":ssh2",
    ],
    lib_source = "@curl//:all_srcs",
    install = True,
    out_static_libs = ["libcurl.a"],
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": [
            "-framework", "SystemConfiguration",
        ],
        "//conditions:default": [],
    }),
)

configure_make(
    name = "gcrypt",
    configure_in_place = True, # Required by autogen=True
    autogen = True,
    env = {
        "AR": "",
    },
    configure_options = [
        "--disable-doc",
        "--disable-shared",
    ],
    lib_source = "@gcrypt//:all_srcs",
    out_static_libs = ["libgcrypt.a"],
    deps = [
        ":gpg_error",
    ],
)

configure_make(
    name = "gpg_error",
    configure_in_place = True, # Required by autogen=True
    autogen = True,
    env = {
        "AR": "",
    },
    configure_options = [
        "--disable-doc",
        "--disable-shared",
    ],
    lib_source = "@gpg_error//:all_srcs",
    out_static_libs = ["libgpg-error.a"],
)

configure_make(
    name = "ldap",
    configure_options = [
        "--disable-debug",
    ],
    copts = ["-UDEBUG"],
    lib_source = "@ldap//:all_srcs",
    out_static_libs = ["libldap.a"],
)

cmake(
    name = "ssh2",
    cache_entries = {
        "CMAKE_C_FLAGS": "-fPIC",
    },
    deps = [
        ":gcrypt",
    ],
    lib_source = "@ssh2//:all_srcs",
    install = True,
    out_static_libs = ["libssh2.a"],
)

configure_make(
    name = "univalue",
    configure_in_place = True, # Required by autogen=True
    autogen = True,
    env = {
        "AR": "",
    },
    lib_source = "@univalue//:all_srcs",
    out_static_libs = ["libunivalue.a"],
)

cmake(
    name = "zlib",
    cache_entries = {
        "CMAKE_C_FLAGS": "-fPIC",
        "ZLIB_COMPAT": "ON",
    },
    lib_source = "@zlib//:all_srcs",
    install = True,
    out_static_libs = ["libz.a"],
)

# End of File
